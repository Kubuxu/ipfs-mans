name: put
command: ipfs object put
options:
  - name: datafieldenc
    type: string
    default: text
    description: Encoding type of the data field, either "text" or "base64".
  - name: inputenc
    type: string
    default: json
    description: Encoding type of input data. One of: {"protobuf", "json"}.
arguments:
  - name: data
    type: file
    required: true
    stdin: true
    description: Data to be stored as a DAG object.
help:
  tagline: Stores input as a DAG object, outputs its key.
  short: |
    'ipfs object put' is a plumbing command for storing DAG nodes.
    It reads from stdin, and the output is a base58 encoded multihash.
  long: |
    'ipfs object put' is a plumbing command for storing DAG nodes.
    It reads from stdin, and the output is a base58 encoded multihash.
    
    Data should be in the format specified by the --inputenc flag.
    --inputenc may be one of the following:
    	* "protobuf"
    	* "json" (default)
    
    Examples:
    
    	$ echo '{ "Data": "abc" }' | ipfs object put
    
    This creates a node with the data 'abc' and no links. For an object with
    links, create a file named 'node.json' with the contents:
    
        {
            "Data": "another",
            "Links": [ {
                "Name": "some link",
                "Hash": "QmXg9Pp2ytZ14xgmQjYEiHjVjMFXzCVVEcRTWJBmLgR39V",
                "Size": 8
            } ]
        }
    
    And then run:
    
    	$ ipfs object put node.json
